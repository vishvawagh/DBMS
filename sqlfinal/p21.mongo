Create Database DYPIT using MongoDB
Create following Collections
Teachers(Tname,dno,dname,experience,salary,date_of_joining )
Students(Sname,roll_no,class)
1. Find the information about all teachers
2. Find the average salary teachers of computer department
3. Find the minimum and maximum salary of e&TC department teachers
4. Find the information about all teachers of computer,IT,and E&TC department having
salary greate than or equl to 10000/-
5. Find the student information having roll_no = 2 or Sname=xyz
6. Update the experience of teacher-praveen to 10years, if the entry is not available in
database consider the entry as new entry.
7. Update the deparment of all the teachers working in IT deprtment to COMP
8. find the teachers name and their experience from teachers collection
9. Using Save() method insert one entry in department collection
10. Find the total salary all teachers.
MongoDB does not have tables; instead, it uses collections to store documents. I'll guide you through creating the DYPIT database, defining the Teachers and Students collections, and then providing the requested queries:

1. Create the `DYPIT` database:

```javascript
use DYPIT
```

2. Create the `Teachers` and `Students` collections:

```javascript
db.createCollection("Teachers")
db.createCollection("Students")
```

3. Insert data into the `Teachers` and `Students` collections:

```javascript
// Insert data into the Teachers collection
db.Teachers.insertMany([
   {
      Tname: "John",
      dno: 1,
      dname: "Computer",
      experience: 5,
      salary: 12000,
      date_of_joining: ISODate("2022-01-01")
   },
   {
      Tname: "Alice",
      dno: 2,
      dname: "IT",
      experience: 8,
      salary: 11000,
      date_of_joining: ISODate("2021-05-15")
   },
   {
      Tname: "Praveen",
      dno: 3,
      dname: "E&TC",
      experience: 6,
      salary: 9500,
      date_of_joining: ISODate("2022-02-10")
   },
   {
      Tname: "Rajesh",
      dno: 2,
      dname: "IT",
      experience: 7,
      salary: 10500,
      date_of_joining: ISODate("2020-12-05")
   }
]);

// Insert data into the Students collection
db.Students.insertMany([
   {
      Sname: "Alice",
      roll_no: 1,
      class: "A"
   },
   {
      Sname: "Bob",
      roll_no: 2,
      class: "B"
   },
   {
      Sname: "Charlie",
      roll_no: 3,
      class: "C"
   }
]);
```

Now you have the `Teachers` and `Students` collections in the `DYPIT` database. You can perform the requested queries:

1. Find the information about all teachers:

```javascript
db.Teachers.find({});
```

2. Find the average salary of teachers in the Computer department:

```javascript
db.Teachers.aggregate([
   { $match: { dname: "Computer" } },
   { $group: { _id: null, avg_salary: { $avg: "$salary" } } }
]);
```

3. Find the minimum and maximum salary of E&TC department teachers:

```javascript
db.Teachers.aggregate([
   { $match: { dname: "E&TC" } },
   { $group: { _id: null, min_salary: { $min: "$salary" }, max_salary: { $max: "$salary" } } }
]);
```

4. Find the information about all teachers of Computer, IT, and E&TC departments having a salary greater than or equal to 10000:

```javascript
db.Teachers.find({ dname: { $in: ["Computer", "IT", "E&TC"] }, salary: { $gte: 10000 } });
```

5. Find student information with roll_no = 2 or Sname = "xyz":

```javascript
db.Students.find({ $or: [{ roll_no: 2 }, { Sname: "xyz" }] });
```

6. Update the experience of teacher Praveen to 10 years, or insert a new entry if it doesn't exist:

```javascript
db.Teachers.updateOne({ Tname: "Praveen" }, { $set: { experience: 10 } }, { upsert: true });
```

7. Update the department of all teachers working in IT to "COMP":

```javascript
db.Teachers.updateMany({ dname: "IT" }, { $set: { dname: "COMP" } });
```

8. Find teachers' names and their experience from the Teachers collection:

```javascript
db.Teachers.find({}, { Tname: 1, experience: 1, _id: 0 });
```

9. MongoDB does not have a `save()` method for collections.

10. Find the total salary of all teachers:

```javascript
db.Teachers.aggregate([{ $group: { _id: null, total_salary: { $sum: "$salary" } } }]);
```

These queries will help you retrieve and manipulate data in the MongoDB collections you've created. Please adjust the field names and data according to your actual data.