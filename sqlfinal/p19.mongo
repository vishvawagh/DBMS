Create Database DYPIT using MongoDB
Create following Collections
Teachers(Tname,dno,dname,experience,salary,date_of_joining )
Students(Sname,roll_no,class)
1. Find the information about all teachers
2. Find the information about all teachers of computer department
3. Find the information about all teachers of computer,IT,and e&TC department
4. Find the information about all teachers of computer,IT,and E&TC department having
salary greate than or equl to 10000/-
5. Find the student information having roll_no = 2 or Sname=xyz
6. Update the experience of teacher-praveen to 10years, if the entry is not available in
database consider the entry as new entry.
7. Update the deparment of all the teachers working in IT deprtment to COMP
8. find the teachers name and their experience from teachers collection
9. Using Save() method insert one entry in department collection
10. Using Save() method change the dept of teacher Rajesh to IT
11. Delete all the doccuments from teachers collection having IT dept.
12. display with pretty() method, the first 3 doccuments in teachers collection in ascending
order
In MongoDB, there are no tables as in traditional relational databases. MongoDB uses collections to store documents. I'll guide you through the process of creating collections, inserting data, and then performing queries based on your requirements.

1. Create the `Teachers` and `Students` collections:

```javascript
// Create the Teachers collection
db.createCollection("Teachers");

// Create the Students collection
db.createCollection("Students");
```

2. Insert data into the `Teachers` and `Students` collections:

```javascript
// Insert data into the Teachers collection
db.Teachers.insertMany([
   {
      Tname: "John",
      dno: 1,
      dname: "Computer",
      experience: 5,
      salary: 12000,
      date_of_joining: ISODate("2022-01-01")
   },
   {
      Tname: "Alice",
      dno: 2,
      dname: "IT",
      experience: 8,
      salary: 11000,
      date_of_joining: ISODate("2021-05-15")
   },
   {
      Tname: "Praveen",
      dno: 3,
      dname: "E&TC",
      experience: 6,
      salary: 9500,
      date_of_joining: ISODate("2022-02-10")
   },
   {
      Tname: "Rajesh",
      dno: 2,
      dname: "IT",
      experience: 7,
      salary: 10500,
      date_of_joining: ISODate("2020-12-05")
   }
]);

// Insert data into the Students collection
db.Students.insertMany([
   {
      Sname: "Alice",
      roll_no: 1,
      class: "A"
   },
   {
      Sname: "Bob",
      roll_no: 2,
      class: "B"
   },
   {
      Sname: "Charlie",
      roll_no: 3,
      class: "C"
   }
]);
```

Now that you have inserted data, you can perform queries as per your requirements:

1. Find the information about all teachers:

```javascript
db.Teachers.find();
```

2. Find the information about all teachers of the Computer department:

```javascript
db.Teachers.find({ dname: "Computer" });
```

3. Find the information about all teachers of the Computer, IT, and E&TC departments:

```javascript
db.Teachers.find({ dname: { $in: ["Computer", "IT", "E&TC"] });
```

4. Find the information about all teachers of Computer, IT, and E&TC departments having a salary greater than or equal to 10000:

```javascript
db.Teachers.find({ dname: { $in: ["Computer", "IT", "E&TC"] }, salary: { $gte: 10000 } });
```

5. Find student information with roll_no = 2 or Sname = "xyz":

```javascript
db.Students.find({ $or: [{ roll_no: 2 }, { Sname: "xyz" }] });
```

6. Update the experience of teacher Praveen to 10 years, or insert a new entry if it doesn't exist:

```javascript
db.Teachers.updateOne({ Tname: "Praveen" }, { $set: { experience: 10 } }, { upsert: true });
```

7. Update the department of all teachers working in IT to "COMP":

```javascript
db.Teachers.updateMany({ dname: "IT" }, { $set: { dname: "COMP" } });
```

8. Find teachers' names and their experience from the Teachers collection:

```javascript
db.Teachers.find({}, { Tname: 1, experience: 1 });
```

9. Using `save()` method, insert one entry in the department collection:

MongoDB doesn't have a `save()` method for collections. You can insert data into a collection using `insertOne()` or `insertMany()` as shown in step 2.

10. Using `save()` method, change the department of teacher Rajesh to "IT":

MongoDB doesn't have a `save()` method for updating data. You can use `updateOne()` or `updateMany()` to update data, as shown in step 6.

11. Delete all documents from the Teachers collection with the department "IT":

```javascript
db.Teachers.deleteMany({ dname: "IT" });
```

12. Display the first 3 documents in the Teachers collection in ascending order:

```javascript
db.Teachers.find().sort({ Tname: 1 }).limit(3);
```

Please note that the MongoDB syntax used here is for the MongoDB shell. You can adapt these queries to the MongoDB driver you are using if you're interacting with MongoDB programmatically.