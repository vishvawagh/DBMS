 Using MapReduce in mongodb solve following queries on given below collection.
db.createCollection("Paper")
db.Paper.insertOne([{
“id” : 0,
“name” : “Leanne Flinn”,
“email” : “leanne.flinn@unilogic.com”,
“work” :”Unilogic” ,
“age” :27
“gender” :”Male”
“Salary” :16660
“hobbies”:”Acrobatics,Photography,Papier-Mache”
}])
!.create table fisrt 
db.createCollection("Paper")
db.Paper.insertOne({
    "id": 0,
    "name": "Leanne Flinn",
    "email": "leanne.flinn@unilogic.com",
    "work": "Unilogic",
    "age": 27,
    "gender": "Male",
    "Salary": 16660,
    "hobbies": "Acrobatics,Photography,Papier-Mache"
})
Certainly, you can perform the same queries in MongoDB using the aggregation framework, which is a more efficient way to achieve these results without writing JavaScript functions. Here are the queries in MongoDB's aggregation framework:

1. Get the count of Males and Females:

```javascript
db.Paper.aggregate([
    {
        $group: {
            _id: "$gender",
            count: { $sum: 1 }
        }
    }
]);
```

2. Count the number of users in each hobby:

```javascript
db.Paper.aggregate([
    {
        $unwind: "$hobbies"
    },
    {
        $group: {
            _id: "$hobbies",
            count: { $sum: 1 }
        }
    }
]);
```

These aggregation queries achieve the same results as the MapReduce approach, but they are more efficient and can be performed directly in MongoDB without the need for JavaScript functions.
